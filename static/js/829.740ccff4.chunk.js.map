{"version":3,"file":"static/js/829.740ccff4.chunk.js","mappings":"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","sources":["components/Users/User/User.tsx","components/Users/Users.tsx","redux/selectors/users-selectors.ts","components/Users/UsersContainer.tsx"],"sourcesContent":["import {Avatar, Divider, FormControlLabel, ListItem, ListItemAvatar, ListItemText, Switch} from '@mui/material';\r\nimport {NavLink} from 'react-router-dom';\r\nimport userAvatar from '../../../assets/img/avatar/avatar.jpg';\r\nimport React, {FC} from 'react';\r\nimport {UserType} from '../users-reducer';\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    followingProgress: number[]\r\n    followUnfollow: (userId: number, isFollow: boolean) => void\r\n}\r\n\r\nexport const User: FC<UserPropsType> = props => {\r\n    const {user, followingProgress, followUnfollow} = props;\r\n\r\n    const followHandler = () => followUnfollow(user.id, true);\r\n    const unfollowHandler = () => followUnfollow(user.id, false);\r\n\r\n    return (\r\n        <>\r\n            <ListItem sx={{display: 'flex', alignItems: 'flex-start', justifyContent: 'space-between', p: '1rem'}}>\r\n                <ListItemAvatar sx={{width: '150px'}}>\r\n                    <NavLink to={`/profile/${user.id}`}>\r\n                        <Avatar\r\n                            alt=\"Avatar\"\r\n                            src={user.photos.small !== null ? user.photos.small : userAvatar}\r\n                            sx={{mb: '0.5rem'}}\r\n                        />\r\n                    </NavLink>\r\n                    <FormControlLabel\r\n                        sx={{display: 'block'}}\r\n                        disabled={followingProgress.some(id => id === user.id)}\r\n                        label={user.followed ? 'Unfollow' : 'Follow'}\r\n                        control={\r\n                            <Switch\r\n                                checked={user.followed}\r\n                                onChange={user.followed ? unfollowHandler : followHandler}\r\n                                name=\"loading\" color=\"success\"\r\n                            />}\r\n                    />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    sx={{width: '50%'}}\r\n                    primary={user.name}\r\n                    secondary={user.status === null ? 'No status...' : user.status}\r\n                />\r\n            </ListItem>\r\n            <Divider variant=\"inset\" component=\"li\"/>\r\n        </>\r\n    );\r\n};","import React, {ChangeEvent, FC} from 'react';\r\nimport {List, Pagination, Stack} from '@mui/material';\r\nimport {Preloader} from '../../common/Preloader';\r\nimport {UsersContainerType} from './UsersContainer';\r\nimport {User} from './User/User';\r\n\r\ntype UsersTypeProps = UsersContainerType & {\r\n    onChangePage: (page: number) => void\r\n}\r\n\r\nexport const Users: FC<UsersTypeProps> = props => {\r\n    const {\r\n        onChangePage,\r\n        totalUsersCount,\r\n        page,\r\n        isFetching,\r\n        users,\r\n        followingProgress,\r\n        followUnfollow,\r\n        count\r\n    } = props;\r\n\r\n    const onChangePageHandler = (e: ChangeEvent<unknown>, page: number) => onChangePage(page);\r\n\r\n    if (isFetching) return <Preloader/>;\r\n\r\n    const pageCount = Math.ceil(totalUsersCount / count);\r\n\r\n    return (\r\n        <div>\r\n            <Stack spacing={2} sx={{m: '1rem 0rem 2rem', alignItems: 'center'}}>\r\n                <Pagination count={pageCount} page={page} onChange={onChangePageHandler}/>\r\n            </Stack>\r\n            <List>\r\n                {users.map(user =>\r\n                    <User\r\n                        key={user.id}\r\n                        user={user}\r\n                        followingProgress={followingProgress}\r\n                        followUnfollow={followUnfollow}\r\n                    />)}\r\n            </List>\r\n        </div>\r\n    );\r\n};\r\n","import {AppStateType} from '../redux-store';\r\nimport {createSelector} from 'reselect';\r\n\r\nconst getUsersSelector = (state: AppStateType) => state.usersPage.users;\r\n\r\nexport const getPageSize = (state: AppStateType) => state.usersPage.count;\r\n\r\nexport const getTotalCount = (state: AppStateType) => state.usersPage.totalCount;\r\n\r\nexport const getPage = (state: AppStateType) => state.usersPage.page;\r\n\r\nexport const getIsFetching = (state: AppStateType) => state.usersPage.isLoading;\r\n\r\nexport const getFollowingProgress = (state: AppStateType) => state.usersPage.followingProgress;\r\n\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => users);","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {Users} from './Users';\r\nimport {fetchUsers, followUnfollow, UserType} from './users-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {\r\n    getFollowingProgress,\r\n    getIsFetching,\r\n    getPage,\r\n    getPageSize,\r\n    getTotalCount,\r\n    getUsers\r\n} from '../../redux/selectors/users-selectors';\r\n\r\ntype MapStatePropsType = {\r\n    users: UserType[]\r\n    count: number\r\n    totalUsersCount: number\r\n    page: number\r\n    isFetching: boolean\r\n    followingProgress: number[]\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    fetchUsers: ({page, count}: {page: number, count: number}) => void\r\n    followUnfollow: (userId: number, isFollow: boolean) => void\r\n};\r\nexport type UsersContainerType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nclass UsersContainer extends React.Component<UsersContainerType> {\r\n    componentDidMount() {\r\n        this.props.fetchUsers({page: this.props.page, count: this.props.count});\r\n    };\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<UsersContainerType>, nextState: Readonly<UsersContainerType>): boolean {\r\n        return nextProps !== this.props || nextState !== this.state;\r\n    }\r\n\r\n    onChangePage = (page: number) => {\r\n        this.props.fetchUsers({page, count: this.props.count});\r\n    };\r\n\r\n    render() {\r\n        return <Users {...this.props} onChangePage={this.onChangePage}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n        users: getUsers(state),\r\n        count: getPageSize(state),\r\n        totalUsersCount: getTotalCount(state),\r\n        page: getPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingProgress: getFollowingProgress(state),\r\n    }\r\n);\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {fetchUsers, followUnfollow}),\r\n    withAuthRedirect,\r\n)(UsersContainer);\r\n\r\n"],"names":["User","props","user","followingProgress","followUnfollow","ListItem","sx","display","alignItems","justifyContent","p","ListItemAvatar","width","to","id","Avatar","alt","src","photos","small","userAvatar","mb","FormControlLabel","disabled","some","label","followed","control","Switch","checked","onChange","name","color","ListItemText","primary","secondary","status","Divider","variant","component","Users","onChangePage","totalUsersCount","page","isFetching","users","count","Preloader","pageCount","Math","ceil","Stack","spacing","m","Pagination","e","List","map","getPageSize","state","usersPage","getTotalCount","totalCount","getPage","getIsFetching","isLoading","getFollowingProgress","getUsers","createSelector","UsersContainer","fetchUsers","this","nextProps","nextState","React","compose","connect","withAuthRedirect"],"sourceRoot":""}